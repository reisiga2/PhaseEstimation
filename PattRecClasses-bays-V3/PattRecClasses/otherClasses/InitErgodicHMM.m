%hmm=InitErgodicHMM(nStates,stateDuration,pD,obsData,lData);%Initialize a stationary ergodic Hidden Markov Model (a HMM object)%in a simple standardized way,%to conform with a given set of training data sequences.%NOTE: The HMM is NOT YET TRAINED to the data.%%The HMM gets a structure allowing transitions from each state%to every other state, with infinite duration.%The HMM output probability distributions are cloned from a given type.%%Input:%nStates=   desired number of HMM states%stateDuration= average number of consecutive samples in each state%           (may be left empty if unknown)%pD=        a single object of some probability-distribution class%           or an array with nStates probdistr objects%obsData=   matrix with concatenated finite-duration training sequences.%           Observed vector samples are stored column-wise.%lData=     (optional) vector with lengths of training sub-sequences.%lData(r)=  length of r:th training sequence.%           sum(lData) == size(obsData,2)%%Result:%hmm=       the resulting Hidden Markov Model object%%Arne Leijon 2009-07-19 tested%            2011-08-04, still working, but outdated, to be deleted!function hmm=InitErgodicHMM(nStates,stateDuration,pD,obsData,lData)warning('InitErgodicHMM:OLD','InitErgodicHMM is outdated, use HMM/init instead');defaultDuration=10;%if stateDuration not givenif nargin <5    lData=size(obsData,2);%just one single sequenceend;if isempty(stateDuration)    stateDuration=defaultDuration;end;%Stationary ergodic MarkovChain sub-object with infinite duration:mc=initErgodic(MarkovChain,nStates,stateDuration);hmm=init(HMM(mc,pD),obsData,lData);%****2011-08-04: OLD, replaced by HMM/init:% %OutputDistr sub-object, using nStates regions in obsData:% if length(pD)==1%     pD=repmat(pD,nStates,1);% else%     if length(pD)~=nStates%         pD=repmat(pD(1),nStates,1);%         warning('HMMclasses:InitErgodic','Incompatible ProbDistr size');%     end;% end;% pD=init(pD,obsData);%initialize with VQ clusters across all obsData% % hmm=HMM(mc,pD);%create the HMM% %*****first improve the OutputDistr, using fixed MarkovChain state durations:% for i=1:5% %     figure;% %     plotCross(get(hmm,'OutputDistr'),[1 2],'rbgk');%******only for test%     hTemp=train(hmm,obsData,lData,1);%     hmm.OutputDistr=hTemp.OutputDistr;%use only new OutputDistr% end;%     