%hmm=InitLeftRightHMM(nStates,pD,obsData,lData);%Initialize a Hidden Markov Model (a HMM object)%in a simple standardized way,%to conform with a given set of training data sequences.%NOTE: The HMM is NOT YET TRAINED to the data.%%The HMM gets a first-order left-right structure allowing transitions only to%the nearest following state.%The HMM output probability distributions are cloned from a given type.%%Input:%nStates=   desired number of HMM states%pD=        a single object of some probability-distribution class%obsData=   matrix with concatenated finite-duration training sequences.%           Observed vector samples are stored column-wise.%lData=     vector with lengths of training sub-sequences.%lData(r)=  length of r:th training sequence.%           sum(lData) == size(obsData,2)%%Result:%hmm=       the resulting Hidden Markov Model object%%Arne Leijon 2004-11-22 tested, with GaussD or GaussMixD distributions%           2009-07-19, minor change%           2011-08-04, outdated version, to be deleted!function hmm=InitLeftRightHMM(nStates,pD,obsData,lData)warning('InitLeftRightHMM:OLD','InitLeftRightHMM is outdated, use HMM/init instead');minDiagProb=0.1;%initial min diagonal TransitionProb valueif nStates<=0	error('Number of states must be >0');end;if nargin <4%just one single sequence    lData=size(obsData,2);end;%Left-right MarkovChain sub-object with finite duration:D=mean(lData);%average total sequence lengthD=D./nStates;%average state durationmc=initLeftRight(MarkovChain,nStates,D);hmm=init(HMM(mc,pD),obsData,lData);%***** OLD, replaced by HMM/init% %mOutputDistr sub-object:% % pD=init(pD(1),obsData);%initialize a single probDistr object to all observation data% % pD=repmat(pD,nStates,1);%clone to nStates identical distributions% % Can lead to un-necessarily slow training......% % if length(pD)==1%     pD=repmat(pD,nStates,1);% else if length(pD)~=nStates%         pD=repmat(pD(1),nStates,1);%         warning('HMMclasses:InitLeftRightHMM','Incompatible ProbDistr size');%     end;% end;% dSize=size(obsData,1);%vector size% nTrainingSeq=length(lData);% startIndex=cumsum([1,lData]);%of each separate training sequence% for i=1:nStates%use i:th consecutive segment of each training seq to init state i%     xT=zeros(dSize,0);%to store training data for state i%     for r=1:nTrainingSeq%collect i:th part of all training sequences%         dStart=startIndex(r)+round((i-1).*lData(r)./nStates);%         dEnd=startIndex(r)+round(i.*lData(r)./nStates)-1;%         xT=[xT,obsData(:,dStart:dEnd)];%     end;%     pD(i)=init(pD(i),xT);% end;% % hmm=HMM(mc,pD);%finally create the HMM