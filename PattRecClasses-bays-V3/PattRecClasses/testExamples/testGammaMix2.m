function [gNew,gG]=testGammaMix2%test Mixture D of array with 2 GammaD, each with 2 dim%Arne Leijon 2010-07-13c='rbgk';%state color coding, max 4 states%make a simple array of GammaD:sgGen(1)=GammaD([2 3],[5 5]);gGen(2)=GammaD([2 3],[7 7]);gG=MixtureD(gGen,[1 1]);%Make a big training data sequence:nData=1000;[xTraining,sT]=gG.rand(nData);gNew=MixtureD(repmat(GammaD,2,1));gNew=init(gNew,xTraining);for nTraining=1:20%     figure;%     [p,lS]=gGen.prob(xPlot);%     plot(xPlot,p*exp(lS),'LineWidth',2);hold on;%     [p,lS]=gNew.prob(xPlot);%     plot(xPlot,p*exp(lS),'LineWidth',1);hold off;        figure;    plotTraining(xTraining,sT,c);    %also plot error points, as classified by viterbi...    plotCross(gNew,[1 2],c); 	%axis([0 30 0 30]);    axis square;	hold off;    %one training step:    aS=adaptStart(gNew);    aS=adaptAccum(gNew,aS,xTraining);    gNew=adaptSet(gNew,aS);end;%finally plot true generating model:hold on;gGen.plotCross([1 2],'k');hold off;% %finally plot Stat.toolbox exact ML estimate:%     AB1=gamfit(x1);%     gML(1)=GammaD(AB1(2),AB1(1));%      AB2=gamfit(x2);%     gML(2)=GammaD(AB2(2),AB2(1));%    [p,lS]=gML.prob(xPlot);% hold on;plot(xPlot,p*exp(lS),'r-','LineWidth',2);hold off;% mixWeight=hNew.MixWeight;% display(mixWeight);%more smooth than original weights!!!function plotTraining(xT,sT,c)nStates=max(sT);for s=1:nStates    plot(xT(1,sT==s),xT(2,sT==s),['o',c(s)],'MarkerSize',2);    hold on;end;