%[alfaHat, c]=forward(mc,pX)%calculates state and observation probabilities for one single data sequence,%using the forward algorithm, for a given single MarkovChain object,%to be used when the MarkovChain is included in a HMM object.%%Input:%mc= single MarkovChain object%pX= matrix with state-conditional likelihood values,%   without considering the Markov depencence between sequence samples.%	pX(j,t)= P( X(t)= observed x(t) | S(t)= j ); j=1..N; t=1..T%	(must be pre-calculated externally)%NOTE: pX may be arbitrarily scaled, as defined externally,%   i.e. it may not be a properly normalized probability density or mass.%%NOTE: If the HMM has Finite Duration, it is assumed to have reached the end%after the last data element in the given sequence, i.e. S(T+1)=END=N+1.%%Result:%alfaHat=matrix with normalized state probabilities, given the observations:%	alfaHat(j,t)=P[S(t)=j|x(1)...x(t), HMM]; t=1..T%c=row vector with observation probabilities, given the HMM:%	c(t)=P[x(t) | x(1)...x(t-1),HMM]; t=1..T%	c(1)*c(2)*..c(t)=P[x(1)..x(t)| HMM]%   If the HMM has Finite Duration, the last element includes%   the probability that the HMM ended at exactly the given sequence length, i.e.%   c(T+1)= P( S(T+1)=N+1| x(1)...x(T-1), x(T)  )%Thus, for an infinite-duration HMM:%   length(c)=T%   prod(c)=P( x(1)..x(T) )%and, for a finite-duration HMM:%   length(c)=T+1%   prod(c)= P( x(1)..x(T), S(T+1)=END )%%NOTE: IF pX was scaled externally, the values in c are %   correspondingly scaled versions of the true probabilities.%%Arne Leijon 2007-08-16 tested (changed definition of scale factor)function [alfaHat, c]=forward(mc,pX)T=size(pX,2);%Number of observationspState=mc.InitialProb;%P[S(1)]A=mc.TransitionProb;%A(i,j)=P( S(t)=j | S(t-1)=i )nStates=length(pState);alfaHat=zeros(nStates,T);if size(A,2)>nStates%i.e. the HMM has an END-state =(nStates+1)    c=zeros(1,T+1);else    c=zeros(1,T);end;At=A(:,1:nStates)';%use only square part of TransitionProbfor t=1:T	alfaTemp=pState.*pX(:,t);%P[x(t),S(t)|x(1)..x(t-1)]% 	c(t)=1/sum(alfaTemp);%1/P[x(t)|x(1)..x(t-1)]******changed 2007-08-16% 	alfaHat(:,t)=c(t)*alfaTemp;%P[S(t)|x(1)..x(t)]	c(t)=sum(alfaTemp);%P[x(t)|x(1)..x(t-1)]	alfaHat(:,t)=alfaTemp./c(t);%P[S(t)|x(1)..x(t)]	pState=At*alfaHat(:,t);%P[S(t+1)|x(1)..x(t)]end;if size(A,2)>nStates%i.e. the HMM has an END-state =(nStates+1)    c(T+1)=(alfaHat(:,T)'*A(:,nStates+1));%=P[S(T+1)=N+1 | x(1)..x(T) ]end;