%function mc=initLeftRight(mc,nStates,stateDuration);%Initialize a single MarkovChain object%to a finite-duration first-order left-right structure%allowing transitions from every state only to%the nearest following state.%%Input:%mc=        the MarkovChain object%nStates=   desired number of Markov states%stateDuration= average number of consecutive samples in each state%           (optional may be left empty if unknown)%%Result:%mc=       the initialized MarkovChain object%%Arne Leijon 2006-08-11 use sparse matrices%            function mc=initLeftRight(mc,nStates,stateDuration)defaultDuration=10;%if stateDuration not givenif nargin<3    stateDuration=defaultDuration;end;minDiagProb=0.1;%initial min diagonal TransitionProb value%if nStates<=0	error('Number of states must be >0');end;D=max(1,stateDuration);aii=max(minDiagProb,(D-1)./D);%diagonal values of TransitionProb matrixaii=repmat(aii,nStates,1);aij=(1-aii);%off-diagonal values, only one non-zero off-diagonalA=sparse(1:nStates,1:nStates,aii,nStates,nStates+1)+sparse(1:nStates,2:nStates+1,aij);% aij=diag(aij,1);% aij=aij(1:nStates,:);% A=[diag(aii),zeros(nStates,1)]+aij;%p0=[1;zeros(nStates-1,1)];p0=sparse(1,1,1,nStates,1);mc.InitialProb=p0;mc.TransitionProb=A;